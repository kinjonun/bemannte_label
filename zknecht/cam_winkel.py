import numpy as np
from scipy.spatial.transform import Rotation as R

# 给定的相机外参矩阵

# 提取旋转矩阵
R1 = np.array([[3.48389808e-03, -9.99991857e-01, -2.03672545e-03],
               [5.01436077e-03, 2.05418180e-03, -9.99985318e-01],
               [9.99981359e-01, 3.47363405e-03, 5.02147650e-03]])

R2 = np.array([[-0.7058346 , -0.70837481, -0.00162678],
               [-0.03968773,  0.04183808, -0.99833585],
               [0.70726403, -0.70459541, -0.05764455]])
R3 = np.array([[ 7.11224320e-01, -7.02963962e-01, -1.27846207e-03],
                [-3.78781163e-02, -3.65070574e-02, -9.98615283e-01],
                [ 7.01943883e-01,  7.10287901e-01, -5.25916578e-02],])
R4 = np.array([[-4.51747090e-01,  8.92141601e-01, -2.81592903e-03],
       [ 6.29732548e-04, -2.83748374e-03, -9.99995776e-01],
       [-8.92145823e-01, -4.51746956e-01,  7.20014421e-04]])
R5 = np.array([[ 4.51425514e-01,  8.92304876e-01, -2.64833364e-03],
       [ 1.04018533e-03, -3.49418939e-03, -9.99993354e-01],
       [-8.92308200e-01,  4.51419759e-01, -2.50552868e-03]])
R6 = np.array([[-0.98765068,  0.1566373 ,  0.00329918, ],
       [ 0.00531896,  0.0545687 , -0.99849585,  ],
       [-0.15658172, -0.98614756, -0.05472796, ]])
R7 = np.array([[ 0.98652539,  0.16359899,  0.0017409 ],
       [ 0.01116106, -0.05667933, -0.99833005,],
       [-0.16322711,  0.98489737, -0.05774154,]])

R_relative = np.dot(R7, np.linalg.inv(R1))


r = R.from_matrix(R_relative)
euler_angles = r.as_euler('xyz', degrees=True)  # 这里使用‘xyz’顺序，可以根据需要选择其他顺序
print(euler_angles)


# [ 34.67376064 -89.65015859  55.20904232]
# [ -94.67708148  -45.012743   -176.78175689]
# [ 94.23460891 -44.58317081  -3.04855688]
# [-89.90867957  63.14414097 179.92013006]

# [  4.8470889  -45.0052134   -3.23851224]
# [ 4.67408631 45.05048033  3.11648041]
# [-179.6075489   -26.65605509  179.68737612]  [-179.93300231   27.03403456  179.64399654]
# [ 162.05225921  -80.30068478 -161.83771913]   [159.78655086  80.17730841 159.85607032]




# 示例内参矩阵
K = [
    np.array([[1.77873629e+03, 0.00000000e+00, 7.76921930e+02, 0.00000000e+00],
              [0.00000000e+00, 1.77873629e+03, 1.01417800e+03, 0.00000000e+00],
              [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
              [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]),
    np.array([[1.68499611e+03, 0.00000000e+00, 1.02920065e+03, 0.00000000e+00],
              [0.00000000e+00, 1.68499611e+03, 7.73366865e+02, 0.00000000e+00],
              [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
              [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]),
np.array([[1.68499755e+03, 0.00000000e+00, 1.02713848e+03, 0.00000000e+00],
       [0.00000000e+00, 1.68499755e+03, 7.73332691e+02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]), np.array([[1.68386096e+03, 0.00000000e+00, 1.02854909e+03, 0.00000000e+00],
       [0.00000000e+00, 1.68386096e+03, 7.73100778e+02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]), np.array([[1.68535023e+03, 0.00000000e+00, 1.03012484e+03, 0.00000000e+00],
       [0.00000000e+00, 1.68535023e+03, 7.70499019e+02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]), np.array([[1.68578357e+03, 0.00000000e+00, 1.02993571e+03, 0.00000000e+00],
       [0.00000000e+00, 1.68578357e+03, 7.72337836e+02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]), np.array([[1.68566920e+03, 0.00000000e+00, 1.02767376e+03, 0.00000000e+00],
       [0.00000000e+00, 1.68566920e+03, 7.72886779e+02, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
       [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])
    # 继续其他内参矩阵...
]

# 图像的宽度和高度 (例如 1920x1080)
width, height = 1550, 2048

for i, intrinsic in enumerate(K):
    fx = intrinsic[0, 0]
    fy = intrinsic[1, 1]

    # 计算视场角
    FOV_x = 2 * np.arctan(width / (2 * fx)) * 180 / np.pi
    FOV_y = 2 * np.arctan(height / (2 * fy)) * 180 / np.pi

    print(f"相机 {i+1} 的水平视角: {FOV_x:.2f}°，垂直视角: {FOV_y:.2f}°")

# 相机 1 的水平视角: 47.09°，垂直视角: 59.86°
# 相机 2 的水平视角: 62.58°，垂直视角: 49.40°
# 相机 3 的水平视角: 62.58°，垂直视角: 49.40°
# 相机 4 的水平视角: 62.61°，垂直视角: 49.43°
# 相机 5 的水平视角: 62.56°，垂直视角: 49.39°
# 相机 6 的水平视角: 62.55°，垂直视角: 49.38°
# 相机 7 的水平视角: 62.56°，垂直视角: 49.38°